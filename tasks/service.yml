---
# linux-postinstall service

- name: "service: Set my_service_name_vars"
  set_fact:
    my_service_name_vars: "{{ my_service_name_vars|default([]) +
                              [{item: lookup('vars', 'lp_' + item + '_service')}] }}"
  loop: "{{ lp_service_enable }}"
  when: lookup('vars', 'lp_' + item, default='false')
  tags: lp_service_debug

- name: "service: Set my_service_enable_vars"
  set_fact:
    my_service_enable_vars: "{{ my_service_enable_vars|default([]) +
                                [{item: lookup('vars', 'lp_' + item + '_enable')}] }}"
  loop: "{{ lp_service_enable }}"
  when: lookup('vars', 'lp_' + item, default='false')
  tags: lp_service_debug

- name: "service: Debug print"
  debug:
    msg: "{{ my_msg.split('\n') }}"
  vars:
    my_msg: |
      lp_service
      {{ lp_service|to_nice_yaml }}
      lp_service_enable
      {{ lp_service_enable|to_nice_yaml }}
      my_service_name_vars
      {{ my_service_name_vars|default([])|to_nice_yaml }}
      my_service_enable_vars
      {{ my_service_enable_vars|default([])|to_nice_yaml }}
  when: lp_service_debug|bool
  tags: lp_service_debug

- name: "service: Automaticaly enable or disable services managed by this role"
  service:
    name: "{{ lookup('vars', 'lp_' + item + '_service') }}"
    enabled: "{{ lookup('vars', 'lp_' + item + '_enable') }}"
  loop: "{{ lp_service_enable }}"
  when: lookup('vars', 'lp_' + item, default='false')
  tags: lp_service_auto

- name: "service: General managent of services"
  service:
    name: "{{ item.name }}"
    state: "{{ item.state|default(omit) }}"
    enabled: "{{ item.enabled|default(omit) }}"
    arguments: "{{ item.arguments|default(omit) }}"
    pattern: "{{ item.pattern|default(omit) }}"
    runlevel: "{{ item.runlevel|default(omit) }}"
    sleep: "{{ item.sleep|default(omit) }}"
    use: "{{ item.use|default('omit') }}"
  loop: "{{ lp_service }}"
  when: (item.state is defined) or
        (item.enabled is defined)
  tags: lp_service_general

# TODO: Mask a service. Do not allow any servce to activate a masked
# service. See tasks/wpagui.yml

# EOF
...
